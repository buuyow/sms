// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  // Custom fields for multi-tenancy
  password      String?
  role          Role           @default(USER)
  members       Member[]
  notifications Notification[]

  accounts      Account[]
  sessions      Session[]
  Invitation    Invitation[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Organization {
  id            String         @id @default(cuid())
  name          String
  subdomain     String         @unique
  logo          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  members       Member[]
  invitations   Invitation[]
  subscriptions Subscription[]
  notifications Notification[]
  features      Json?
  settings      Json?

  @@map("organization")
}

model Member {
  id             String           @id @default(cuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           Role             @default(USER)
  status         MembershipStatus @default(ACTIVE)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([userId, organizationId])
}

model Invitation {
  id             String           @id @default(cuid())
  email          String
  role           Role             @default(USER)
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  status         InvitationStatus @default(PENDING)
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  User           User[]

  @@map("invitation")
}

model Subscription {
  id                   String             @id @default(cuid())
  organizationId       String
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plan                 SubscriptionPlan   @default(FREE)
  status               SubscriptionStatus @default(ACTIVE)
  startDate            DateTime
  endDate              DateTime?
  trialEndsAt          DateTime?
  canceledAt           DateTime?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  stripeCustomerId     String?            @unique
  stripeSubscriptionId String?            @unique
  stripePriceId        String?
  features             Json? // Store plan-specific features
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model Notification {
  id             String           @id @default(cuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  title          String
  message        String
  type           NotificationType
  read           Boolean          @default(false)
  data           Json? // Additional notification data
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MEMBER
  USER
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum SubscriptionPlan {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}
